# -*- coding: utf-8 -*-
"""stock47.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1koEpQ8Yq2zWpj93-FImWzYWYWhvAyBKV
"""

#stock prediction

#inports
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

df = web.DataReader('djia', data_source='yahoo', start='2000-01-01', end='2019-12-31')
df

#get number of rows ans columms
df.shape

#visualize close data
plt.figure(figsize=(16,8))
plt.title('close price history')
plt.plot(df['Close'])
plt.xlabel('date', fontsize=18)
plt.ylabel('close price', fontsize=18)
plt.show()

#dataframe with only close data

#convert datframe to numpy array
dataset= data.values
training_data_len = math.ceil( len(dataset)*.8)
training_data_len

#scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

df.shape

#create training data set
#create scaled training data
train_data = scaled_data[0:training_data_len, :]
#split data into x and y train datasets
x_train = []
y_train = []
for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i,0])
  if i <= 61:
    print(x_train)
    print(y_train)
    print()

#convert x and y train ti numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#reshape data
#the number 1 in line below is number on datasets being used can be changed for full system
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

x_train.shape

#build LSTM model
model = Sequential()
model.add(LSTM(300, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(300, return_sequences=True, input_shape= (x_train.shape[1], 1)))

#300 is number of neurons

model.add(LSTM(300, return_sequences=False))
model.add(Dense(300))
model.add(Dense(300))
model.add(Dense(300))
model.add(Dense(1))

#compile model
model.compile(optimizer='adam', loss='mean_squared_error')

#train the model
model.fit(x_train, y_train, batch_size=16, epochs=1)

#create testing dataset
#new scalled array
test_data = scaled_data[training_data_len - 60:, :]
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#convert data to numpy array
x_test = np.array(x_test)

#reshape data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
#last 1 is number of features

#get predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#evaluate model so find root mean squared error
# 0 is perfect
rmse = np.sqrt( np.mean(predictions - y_test)**2)
rmse

#plot data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Visualize data
plt.figure(figsize=(16, 8))
plt.title('Model')
plt.xlabel('date', fontsize=18)
plt.ylabel('close', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc= 'lower right')

df.shape

#show the real and predicted prices
valid

df.shape

#predict for a certain day
stock_quote = web.DataReader('djia', data_source='yahoo', start='2000-01-01', end='2020-07-01')
new_df = stock_quote.filter(['Close'])
last_60_days = new_df[-60:].values
#scale date 
last_60_days_scaled = scaler.transform(last_60_days)
#create empty list
X_test= []
#append last 60 days
X_test.append(last_60_days_scaled)
#convert X_test to numpy array
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#now get predicted price
pred_price = model.predict(X_test)
#undo scaleing
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

#predict for a certain day
stock_quote2 = web.DataReader('djia', data_source='yahoo', start='2019-12-17', end='2019-12-17')
print(stock_quote2)